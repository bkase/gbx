#!/usr/bin/env python3
"""
Generates crates/testdata/roms.index.toml by walking the vendored c-sp bundle.

Usage:
  python3 scripts/generate_testrom_manifest.py
"""

from __future__ import annotations

import datetime
from pathlib import Path
from typing import Iterable

ROOT = Path(__file__).resolve().parents[1]
BUNDLE_ROOT = ROOT / "third_party" / "testroms" / "c-sp-v7.0"
MANIFEST_PATH = ROOT / "crates" / "testdata" / "roms.index.toml"

ROM_EXTS = {".gb", ".gbc", ".bin"}


def iter_roms() -> Iterable[Path]:
    for path in BUNDLE_ROOT.rglob("*"):
        if path.is_file() and path.suffix.lower() in ROM_EXTS:
            yield path


def infer_model(path: Path) -> str:
    lower = str(path).lower()
    if any(token in lower for token in ("cgb", "mealybug", "color", "same-suite/cgb")):
        return "cgb"
    if "sgb" in lower:
        return "sgb"
    return "dmg"


def infer_kind(path: Path) -> str:
    lower = str(path).lower()
    if any(tok in lower for tok in ("acid", "mealybug", "lcd", "sprite", "ppu", "pixel", "screen")):
        return "visual"
    if any(tok in lower for tok in ("timer", "timing", "clock", "div")):
        return "timing"
    if "audio" in lower or "apu" in lower:
        return "audio"
    if "serial" in lower:
        return "serial"
    return "cpu"


def infer_expected(path: Path) -> tuple[str, str | None]:
    lower = str(path).lower()
    if "blargg" in lower:
        return ("serial_ascii", "Passed\\n")
    if "mooneye-test-suite" in lower:
        return ("mooneye_fib", None)
    if "acid2" in lower or "mealybug" in lower:
        return ("screenshot", None)
    return ("unknown", None)


def should_embed(path: Path) -> bool:
    parts = path.parts
    if not parts:
        return False
    if parts[0] == "mooneye-test-suite" and "acceptance" in parts:
        return True
    if parts[0] == "blargg" and any("cpu" in segment or "instr" in segment for segment in parts):
        return True
    return False


def main() -> None:
    if not BUNDLE_ROOT.exists():
        raise SystemExit(f"vendor directory missing: {BUNDLE_ROOT}")

    roms = sorted(iter_roms())
    lines: list[str] = []
    lines.append("# This file is auto-generated by scripts/generate_testrom_manifest.py\n")
    lines.append(
        f'generated = "{datetime.datetime.now(datetime.timezone.utc).isoformat()}"\n'
    )
    lines.append(
        'source = { bundle = "c-sp-v7.0", vendor = "c-sp/game-boy-test-roms", url = "https://github.com/c-sp/game-boy-test-roms/releases/tag/v7.0" }\n\n'
    )

    for rom in roms:
        rel = rom.relative_to(BUNDLE_ROOT)
        suite = rel.parts[0]
        name = rom.stem
        model = infer_model(rel)
        kind = infer_kind(rel)
        expected_kind, expected_value = infer_expected(rel)
        embed = should_embed(rel)

        lines.append("[[rom]]\n")
        lines.append(f'suite = "{suite}"\n')
        lines.append(f'name = "{name}"\n')
        lines.append(f'path = "{rel.as_posix()}"\n')
        lines.append(f'model = "{model}"\n')
        lines.append(f'kind = "{kind}"\n')
        if expected_kind == "serial_ascii":
            lines.append('expected = { kind = "serial_ascii", value = "Passed\\n" }\n')
        else:
            lines.append(f'expected = {{ kind = "{expected_kind}" }}\n')
        lines.append(f"embed = {'true' if embed else 'false'}\n\n")

    MANIFEST_PATH.write_text("".join(lines))
    print(f"wrote manifest with {len(roms)} roms to {MANIFEST_PATH}")


if __name__ == "__main__":
    main()
